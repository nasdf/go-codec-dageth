package dageth

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
)

var _ ipld.Node = nil // suppress errors when this dependency is not referenced
// Type is a struct embeding a NodePrototype/Type for every Node implementation in this package.
// One of its major uses is to start the construction of a value.
// You can use it like this:
//
// 		dageth.Type.YourTypeName.NewBuilder().BeginMap() //...
//
// and:
//
// 		dageth.Type.OtherTypeName.NewBuilder().AssignString("x") // ...
//
var Type typeSlab

type typeSlab struct {
	AccessElement           _AccessElement__Prototype
	AccessElement__Repr     _AccessElement__ReprPrototype
	AccessList              _AccessList__Prototype
	AccessList__Repr        _AccessList__ReprPrototype
	Address                 _Address__Prototype
	Address__Repr           _Address__ReprPrototype
	Balance                 _Balance__Prototype
	Balance__Repr           _Balance__ReprPrototype
	BigInt                  _BigInt__Prototype
	BigInt__Repr            _BigInt__ReprPrototype
	BlockNonce              _BlockNonce__Prototype
	BlockNonce__Repr        _BlockNonce__ReprPrototype
	Bloom                   _Bloom__Prototype
	Bloom__Repr             _Bloom__ReprPrototype
	ByteCode                _ByteCode__Prototype
	ByteCode__Repr          _ByteCode__ReprPrototype
	Bytes                   _Bytes__Prototype
	Bytes__Repr             _Bytes__ReprPrototype
	Hash                    _Hash__Prototype
	Hash__Repr              _Hash__ReprPrototype
	Header                  _Header__Prototype
	Header__Repr            _Header__ReprPrototype
	Int                     _Int__Prototype
	Int__Repr               _Int__ReprPrototype
	Link                    _Link__Prototype
	Link__Repr              _Link__ReprPrototype
	Log                     _Log__Prototype
	Log__Repr               _Log__ReprPrototype
	Logs                    _Logs__Prototype
	Logs__Repr              _Logs__ReprPrototype
	OpCode                  _OpCode__Prototype
	OpCode__Repr            _OpCode__ReprPrototype
	Receipt                 _Receipt__Prototype
	Receipt__Repr           _Receipt__ReprPrototype
	Receipts                _Receipts__Prototype
	Receipts__Repr          _Receipts__ReprPrototype
	StateAccount            _StateAccount__Prototype
	StateAccount__Repr      _StateAccount__ReprPrototype
	StorageKeys             _StorageKeys__Prototype
	StorageKeys__Repr       _StorageKeys__ReprPrototype
	String                  _String__Prototype
	String__Repr            _String__ReprPrototype
	Time                    _Time__Prototype
	Time__Repr              _Time__ReprPrototype
	Topics                  _Topics__Prototype
	Topics__Repr            _Topics__ReprPrototype
	Transaction             _Transaction__Prototype
	Transaction__Repr       _Transaction__ReprPrototype
	Transactions            _Transactions__Prototype
	Transactions__Repr      _Transactions__ReprPrototype
	TrieBranchNode          _TrieBranchNode__Prototype
	TrieBranchNode__Repr    _TrieBranchNode__ReprPrototype
	TrieExtensionNode       _TrieExtensionNode__Prototype
	TrieExtensionNode__Repr _TrieExtensionNode__ReprPrototype
	TrieLeafNode            _TrieLeafNode__Prototype
	TrieLeafNode__Repr      _TrieLeafNode__ReprPrototype
	TrieNode                _TrieNode__Prototype
	TrieNode__Repr          _TrieNode__ReprPrototype
	TrieValueNode           _TrieValueNode__Prototype
	TrieValueNode__Repr     _TrieValueNode__ReprPrototype
	TxType                  _TxType__Prototype
	TxType__Repr            _TxType__ReprPrototype
	Uint                    _Uint__Prototype
	Uint__Repr              _Uint__ReprPrototype
	Uncles                  _Uncles__Prototype
	Uncles__Repr            _Uncles__ReprPrototype
}

// --- type definitions follow ---

// AccessElement matches the IPLD Schema type "AccessElement".  It has Struct type-kind, and may be interrogated like map kind.
type AccessElement = *_AccessElement
type _AccessElement struct {
	Address     _Address
	StorageKeys _StorageKeys
}

// AccessList matches the IPLD Schema type "AccessList".  It has list kind.
type AccessList = *_AccessList
type _AccessList struct {
	x []_AccessElement
}

// Address matches the IPLD Schema type "Address".  It has bytes kind.
type Address = *_Address
type _Address struct{ x []byte }

// Balance matches the IPLD Schema type "Balance".  It has bytes kind.
type Balance = *_Balance
type _Balance struct{ x []byte }

// BigInt matches the IPLD Schema type "BigInt".  It has bytes kind.
type BigInt = *_BigInt
type _BigInt struct{ x []byte }

// BlockNonce matches the IPLD Schema type "BlockNonce".  It has bytes kind.
type BlockNonce = *_BlockNonce
type _BlockNonce struct{ x []byte }

// Bloom matches the IPLD Schema type "Bloom".  It has bytes kind.
type Bloom = *_Bloom
type _Bloom struct{ x []byte }

// ByteCode matches the IPLD Schema type "ByteCode".  It has bytes kind.
type ByteCode = *_ByteCode
type _ByteCode struct{ x []byte }

// Bytes matches the IPLD Schema type "Bytes".  It has bytes kind.
type Bytes = *_Bytes
type _Bytes struct{ x []byte }

// Hash matches the IPLD Schema type "Hash".  It has bytes kind.
type Hash = *_Hash
type _Hash struct{ x []byte }

// Header matches the IPLD Schema type "Header".  It has Struct type-kind, and may be interrogated like map kind.
type Header = *_Header
type _Header struct {
	ParentCID    _Link
	UnclesCID    _Link
	Coinbase     _Address
	StateRootCID _Link
	TxRootCID    _Link
	RctRootCID   _Link
	Bloom        _Bloom
	Difficulty   _BigInt
	Number       _BigInt
	GasLimit     _Uint
	GasUsed      _Uint
	Time         _Time
	Extra        _Bytes
	MixDigest    _Hash
	Nonce        _BlockNonce
}

// Int matches the IPLD Schema type "Int".  It has int kind.
type Int = *_Int
type _Int struct{ x int64 }

// Link matches the IPLD Schema type "Link".  It has link kind.
type Link = *_Link
type _Link struct{ x ipld.Link }

// Log matches the IPLD Schema type "Log".  It has Struct type-kind, and may be interrogated like map kind.
type Log = *_Log
type _Log struct {
	Address _Address
	Topics  _Topics
	Data    _Bytes
}

// Logs matches the IPLD Schema type "Logs".  It has list kind.
type Logs = *_Logs
type _Logs struct {
	x []_Log
}

// OpCode matches the IPLD Schema type "OpCode".  It has bytes kind.
type OpCode = *_OpCode
type _OpCode struct{ x []byte }

// Receipt matches the IPLD Schema type "Receipt".  It has Struct type-kind, and may be interrogated like map kind.
type Receipt = *_Receipt
type _Receipt struct {
	Type              _TxType
	PostState         _Bytes__Maybe
	Status            _Uint__Maybe
	CumulativeGasUsed _Uint
	Bloom             _Bloom
	Logs              _Logs
}

// Receipts matches the IPLD Schema type "Receipts".  It has list kind.
type Receipts = *_Receipts
type _Receipts struct {
	x []_Receipt
}

// StateAccount matches the IPLD Schema type "StateAccount".  It has Struct type-kind, and may be interrogated like map kind.
type StateAccount = *_StateAccount
type _StateAccount struct {
	Nonce          _Uint
	Balance        _Balance
	StorageRootCID _Link
	CodeCID        _Link
}

// StorageKeys matches the IPLD Schema type "StorageKeys".  It has list kind.
type StorageKeys = *_StorageKeys
type _StorageKeys struct {
	x []_Hash
}

// String matches the IPLD Schema type "String".  It has string kind.
type String = *_String
type _String struct{ x string }

// Time matches the IPLD Schema type "Time".  It has bytes kind.
type Time = *_Time
type _Time struct{ x []byte }

// Topics matches the IPLD Schema type "Topics".  It has list kind.
type Topics = *_Topics
type _Topics struct {
	x []_Hash
}

// Transaction matches the IPLD Schema type "Transaction".  It has Struct type-kind, and may be interrogated like map kind.
type Transaction = *_Transaction
type _Transaction struct {
	Type         _TxType
	ChainID      _BigInt__Maybe
	AccountNonce _Uint
	GasPrice     _BigInt
	GasLimit     _Uint
	Recipient    _Address__Maybe
	Amount       _BigInt
	Data         _Bytes
	AccessList   _AccessList__Maybe
	V            _BigInt
	R            _BigInt
	S            _BigInt
}

// Transactions matches the IPLD Schema type "Transactions".  It has list kind.
type Transactions = *_Transactions
type _Transactions struct {
	x []_Transaction
}

// TrieBranchNode matches the IPLD Schema type "TrieBranchNode".  It has Struct type-kind, and may be interrogated like map kind.
type TrieBranchNode = *_TrieBranchNode
type _TrieBranchNode struct {
	Child0 _Link__Maybe
	Child1 _Link__Maybe
	Child2 _Link__Maybe
	Child3 _Link__Maybe
	Child4 _Link__Maybe
	Child5 _Link__Maybe
	Child6 _Link__Maybe
	Child7 _Link__Maybe
	Child8 _Link__Maybe
	Child9 _Link__Maybe
	ChildA _Link__Maybe
	ChildB _Link__Maybe
	ChildC _Link__Maybe
	ChildD _Link__Maybe
	ChildE _Link__Maybe
	ChildF _Link__Maybe
	Value  _Bytes
}

// TrieExtensionNode matches the IPLD Schema type "TrieExtensionNode".  It has Struct type-kind, and may be interrogated like map kind.
type TrieExtensionNode = *_TrieExtensionNode
type _TrieExtensionNode struct {
	PartialPath _Bytes
	ChildNode   _Link
}

// TrieLeafNode matches the IPLD Schema type "TrieLeafNode".  It has Struct type-kind, and may be interrogated like map kind.
type TrieLeafNode = *_TrieLeafNode
type _TrieLeafNode struct {
	PartialPath _Bytes
	Value       _Bytes
}

// TrieNode matches the IPLD Schema type "TrieNode".
// TrieNode has Union typekind, which means its data model behaviors are that of a map kind.
type TrieNode = *_TrieNode
type _TrieNode struct {
	tag uint
	x1  _TrieBranchNode
	x2  _TrieExtensionNode
	x3  _TrieLeafNode
	x4  _TrieValueNode
}
type _TrieNode__iface interface {
	_TrieNode__member()
}

func (_TrieBranchNode) _TrieNode__member()    {}
func (_TrieExtensionNode) _TrieNode__member() {}
func (_TrieLeafNode) _TrieNode__member()      {}
func (_TrieValueNode) _TrieNode__member()     {}

// TrieValueNode matches the IPLD Schema type "TrieValueNode".  It has Struct type-kind, and may be interrogated like map kind.
type TrieValueNode = *_TrieValueNode
type _TrieValueNode struct {
	Value _Bytes
}

// TxType matches the IPLD Schema type "TxType".  It has bytes kind.
type TxType = *_TxType
type _TxType struct{ x []byte }

// Uint matches the IPLD Schema type "Uint".  It has bytes kind.
type Uint = *_Uint
type _Uint struct{ x []byte }

// Uncles matches the IPLD Schema type "Uncles".  It has list kind.
type Uncles = *_Uncles
type _Uncles struct {
	x []_Header
}
